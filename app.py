#!/usr/bin/python3
# -*- coding: utf-8 -*-
# File name : app.py
# Author : MasterLaplace
# Created : 2023-12-07
# Description : Server

from flask import Flask, render_template, jsonify, request, send_from_directory
import openai
import os

app = Flask(__name__)
STATIC_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'includes')

openai.api_key = os.getenv("OPENAI_TOKEN")

def prGreen(key: str, value: str):
    print(f"\033[92m {key}\033[00m", value)

def get_openai_response(text: str, prompt: str)->str:
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": text}
            ],
            temperature=0.7,
        )
        return response["choices"][0]["message"]["content"]
    except:
        return "Error"

@app.route('/')
def index():
    return render_template('mainPage.html')

@app.route('/includes/<path:filename>')
def serve_file(filename):
    return send_from_directory(STATIC_DIR, filename)

@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.route('/quizz')
def quizz():
    return render_template('quizz.html')

@app.route('/gen', methods=['POST'])
def create_task():
    if not request.json or 'text' not in request.json:
        return jsonify({'error': 'The text is required!'}), 400

    text = get_openai_response(request.json['text'], "Ok")
    prGreen("[LOG] Text generated by OpenAI :", text)

    slide_tab = []

    return jsonify({ 'text': text, 'tab_slide': slide_tab }), 201


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000, threaded=True, use_reloader=False)
